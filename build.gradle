plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.sherter.google-java-format' version '0.8'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'org.example'
version = '1.0.0-SNAPSHOT'


repositories {
    mavenCentral()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/service/local/staging/deploy/maven2" }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group: 'org.yaml', module: 'snakeyaml'
}

def log4j_version = '2.22.1'
List logger = [
        "org.apache.logging.log4j:log4j-api:$log4j_version",
        //    "org.apache.logging.log4j:log4j-core:$log4j_version",
        //    "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version",
        "org.apache.logging.log4j:log4j-to-slf4j:$log4j_version",
        //    "org.apache.logging.log4j:log4j-web:$log4j_version"
]

dependencies {
    compile logger
    implementation('org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:3.7.0')
    implementation('org.springframework.boot:spring-boot-starter-web:2.7.18'){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-json'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude(group: 'org.springframework', module: 'spring-webmvc')
        exclude(group: 'org.springframework', module: 'spring-web')
    }
    implementation('org.springframework.boot:spring-boot-starter:2.7.18'){
    }
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.87'
    implementation('org.springframework.boot:spring-boot:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-tomcat:2.7.18')
    implementation('org.springframework.boot:spring-boot-autoconfigure:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-json:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-logging:2.7.18')
    implementation('org.springframework:spring-web:5.3.33')
    implementation('org.springframework:spring-expression:5.3.33')
    implementation('org.springframework:spring-beans:5.3.33')
    implementation('org.springframework:spring-context:5.3.33')
    implementation('org.springframework:spring-core:5.3.33')
    implementation('org.springframework:spring-webmvc:5.3.33')
    compileOnly('org.projectlombok:lombok:1.18.32')
    annotationProcessor('org.projectlombok:lombok:1.18.32')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.14.3') {
        force true
    }
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.7.18') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'junit:junit:4.13.1'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.1')
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}
test {
    useJUnitPlatform()
}

bootJar {
    destinationDir file('dist')
    archiveName project.name + '-exec.jar'
    doLast {
        copy {
            from file('src/main/resources')
            into 'dist'
        }
    }
}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}
