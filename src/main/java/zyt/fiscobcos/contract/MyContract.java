package zyt.fiscobcos.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MyContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","906117e2565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b505050505081526020019060010190610467565b5050505061097c565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fcd7e3c1846040518263ffffffff1660e01b8152600401610578919061151b565b600060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105be91906119cb565b905060005b81602001515181101561060a576105f7826020015182815181106105ea576105e961153d565b5b6020026020010151610b3e565b8080610602906115cf565b9150506105c3565b506003805480602002602001604051908101604052809291908181526020016000905b828210156106d957838290600052602060002001805461064c906117e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610678906117e2565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b50505050508152602001906001019061062d565b50505050915050919050565b60008060018054905067ffffffffffffffff81111561070757610706610ec4565b5b60405190808252806020026020018201604052801561074057816020015b61072d610d58565b8152602001906001900390816107255790505b5090506000600190505b835181101561087c5760405180604001604052806001808461076c919061159b565b8154811061077d5761077c61153d565b5b906000526020600020018054610792906117e2565b80601f01602080910402602001604051908101604052809291908181526020018280546107be906117e2565b801561080b5780601f106107e05761010080835404028352916020019161080b565b820191906000526020600020905b8154815290600101906020018083116107ee57829003601f168201915b5050505050815260200185600184610823919061159b565b815181106108345761083361153d565b5b60200260200101518152508260018361084d919061159b565b8151811061085e5761085d61153d565b5b60200260200101819052508080610874906115cf565b91505061074a565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341ffd75f856000815181106108d0576108cf61153d565b5b6020026020010151846040518363ffffffff1660e01b81526004016108f6929190611b1a565b6020604051808303816000875af1158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611730565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a8160405161096a9190611798565b60405180910390a18092505050919050565b6003600061098a9190610d72565b50565b606080600061100273ffffffffffffffffffffffffffffffffffffffff1663b8764d3f6040518060400160405280600381526020017f7a313100000000000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610a02919061151b565b600060405180830381865afa158015610a1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a489190611c12565b90508060200151816040015192509250509091565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380599e4b846040518263ffffffff1660e01b8152600401610ab9919061151b565b6020604051808303816000875af1158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc9190611730565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051610b2d9190611798565b60405180910390a180915050919050565b600381908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610b79929190610d93565b5050565b6000808460ff161480610b93575060018460ff16145b610b9c57600080fd5b600060018560ff161415610baf57600190505b60006040518060600160405280836001811115610bcf57610bce611c5b565b5b8152602001868152602001858152509050600061100273ffffffffffffffffffffffffffffffffffffffff166375b14eea89846040518363ffffffff1660e01b8152600401610c1f929190611d29565b6020604051808303816000875af1158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611730565b90507fb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf21081604051610c939190611798565b60405180910390a18060030b9350505050949350505050565b60038181548110610cbc57600080fd5b906000526020600020016000915090508054610cd7906117e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d03906117e2565b8015610d505780601f10610d2557610100808354040283529160200191610d50565b820191906000526020600020905b815481529060010190602001808311610d3357829003601f168201915b505050505081565b604051806040016040528060608152602001606081525090565b5080546000825590600052602060002090810190610d909190610e19565b50565b828054610d9f906117e2565b90600052602060002090601f016020900481019282610dc15760008555610e08565b82601f10610dda57805160ff1916838001178555610e08565b82800160010185558215610e08579182015b82811115610e07578251825591602001919060010190610dec565b5b509050610e159190610e3d565b5090565b5b80821115610e395760008181610e309190610e5a565b50600101610e1a565b5090565b5b80821115610e56576000816000905550600101610e3e565b5090565b508054610e66906117e2565b6000825580601f10610e785750610e97565b601f016020900490600052602060002090810190610e969190610e3d565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610efc82610eb3565b810181811067ffffffffffffffff82111715610f1b57610f1a610ec4565b5b80604052505050565b6000610f2e610e9a565b9050610f3a8282610ef3565b919050565b600067ffffffffffffffff821115610f5a57610f59610ec4565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115610f9057610f8f610ec4565b5b610f9982610eb3565b9050602081019050919050565b82818337600083830152505050565b6000610fc8610fc384610f75565b610f24565b905082815260208101848484011115610fe457610fe3610f70565b5b610fef848285610fa6565b509392505050565b600082601f83011261100c5761100b610eae565b5b813561101c848260208601610fb5565b91505092915050565b600061103861103384610f3f565b610f24565b9050808382526020820190506020840283018581111561105b5761105a610f6b565b5b835b818110156110a257803567ffffffffffffffff8111156110805761107f610eae565b5b80860161108d8982610ff7565b8552602085019450505060208101905061105d565b5050509392505050565b600082601f8301126110c1576110c0610eae565b5b81356110d1848260208601611025565b91505092915050565b6000602082840312156110f0576110ef610ea4565b5b600082013567ffffffffffffffff81111561110e5761110d610ea9565b5b61111a848285016110ac565b91505092915050565b60008160030b9050919050565b61113981611123565b82525050565b60006020820190506111546000830184611130565b92915050565b6000602082840312156111705761116f610ea4565b5b600082013567ffffffffffffffff81111561118e5761118d610ea9565b5b61119a84828501610ff7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112095780820151818401526020810190506111ee565b83811115611218576000848401525b50505050565b6000611229826111cf565b61123381856111da565b93506112438185602086016111eb565b61124c81610eb3565b840191505092915050565b6000611263838361121e565b905092915050565b6000602082019050919050565b6000611283826111a3565b61128d81856111ae565b93508360208202850161129f856111bf565b8060005b858110156112db57848403895281516112bc8582611257565b94506112c78361126b565b925060208a019950506001810190506112a3565b50829750879550505050505092915050565b600060208201905081810360008301526113078184611278565b905092915050565b600082825260208201905092915050565b600061132b826111cf565b611335818561130f565b93506113458185602086016111eb565b61134e81610eb3565b840191505092915050565b600060408201905081810360008301526113738185611320565b905081810360208301526113878184611278565b90509392505050565b600060ff82169050919050565b6113a681611390565b81146113b157600080fd5b50565b6000813590506113c38161139d565b92915050565b600080600080608085870312156113e3576113e2610ea4565b5b600085013567ffffffffffffffff81111561140157611400610ea9565b5b61140d87828801610ff7565b945050602061141e878288016113b4565b935050604085013567ffffffffffffffff81111561143f5761143e610ea9565b5b61144b87828801610ff7565b925050606085013567ffffffffffffffff81111561146c5761146b610ea9565b5b611478878288016110ac565b91505092959194509250565b6000819050919050565b61149781611484565b82525050565b60006020820190506114b260008301","8461148e565b92915050565b6000819050919050565b6114cb816114b8565b81146114d657600080fd5b50565b6000813590506114e8816114c2565b92915050565b60006020828403121561150457611503610ea4565b5b6000611512848285016114d9565b91505092915050565b600060208201905081810360008301526115358184611320565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115a6826114b8565b91506115b1836114b8565b9250828210156115c4576115c361156c565b5b828203905092915050565b60006115da826114b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561160d5761160c61156c565b5b600182019050919050565b600082825260208201905092915050565b6000611634826111a3565b61163e8185611618565b935083602082028501611650856111bf565b8060005b8581101561168c578484038952815161166d8582611257565b94506116788361126b565b925060208a01995050600181019050611654565b50829750879550505050505092915050565b600060408301600083015184820360008601526116bb828261121e565b915050602083015184820360208601526116d58282611629565b9150508091505092915050565b600060208201905081810360008301526116fc818461169e565b905092915050565b61170d81611123565b811461171857600080fd5b50565b60008151905061172a81611704565b92915050565b60006020828403121561174657611745610ea4565b5b60006117548482850161171b565b91505092915050565b6000819050919050565b600061178261177d61177884611123565b61175d565b611484565b9050919050565b61179281611767565b82525050565b60006020820190506117ad6000830184611789565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117fa57607f821691505b6020821081141561180e5761180d6117b3565b5b50919050565b600080fd5b600080fd5b600061183161182c84610f75565b610f24565b90508281526020810184848401111561184d5761184c610f70565b5b6118588482856111eb565b509392505050565b600082601f83011261187557611874610eae565b5b815161188584826020860161181e565b91505092915050565b60006118a161189c84610f3f565b610f24565b905080838252602082019050602084028301858111156118c4576118c3610f6b565b5b835b8181101561190b57805167ffffffffffffffff8111156118e9576118e8610eae565b5b8086016118f68982611860565b855260208501945050506020810190506118c6565b5050509392505050565b600082601f83011261192a57611929610eae565b5b815161193a84826020860161188e565b91505092915050565b60006040828403121561195957611958611814565b5b6119636040610f24565b9050600082015167ffffffffffffffff81111561198357611982611819565b5b61198f84828501611860565b600083015250602082015167ffffffffffffffff8111156119b3576119b2611819565b5b6119bf84828501611915565b60208301525092915050565b6000602082840312156119e1576119e0610ea4565b5b600082015167ffffffffffffffff8111156119ff576119fe610ea9565b5b611a0b84828501611943565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006040830160008301518482036000860152611a5d828261121e565b91505060208301518482036020860152611a77828261121e565b9150508091505092915050565b6000611a908383611a40565b905092915050565b6000602082019050919050565b6000611ab082611a14565b611aba8185611a1f565b935083602082028501611acc85611a30565b8060005b85811015611b085784840389528151611ae98582611a84565b9450611af483611a98565b925060208a01995050600181019050611ad0565b50829750879550505050505092915050565b60006040820190508181036000830152611b348185611320565b90508181036020830152611b488184611aa5565b90509392505050565b60028110611b5e57600080fd5b50565b600081519050611b7081611b51565b92915050565b600060608284031215611b8c57611b8b611814565b5b611b966060610f24565b90506000611ba684828501611b61565b600083015250602082015167ffffffffffffffff811115611bca57611bc9611819565b5b611bd684828501611860565b602083015250604082015167ffffffffffffffff811115611bfa57611bf9611819565b5b611c0684828501611915565b60408301525092915050565b600060208284031215611c2857611c27610ea4565b5b600082015167ffffffffffffffff811115611c4657611c45610ea9565b5b611c5284828501611b76565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611c9b57611c9a611c5b565b5b50565b6000819050611cac82611c8a565b919050565b6000611cbc82611c9e565b9050919050565b611ccc81611cb1565b82525050565b6000606083016000830151611cea6000860182611cc3565b5060208301518482036020860152611d02828261121e565b91505060408301518482036040860152611d1c8282611629565b9150508091505092915050565b60006040820190508181036000830152611d438185611320565b90508181036020830152611d578184611cd2565b9050939250505056fea26469706673582212201e18ced4308609e2d3c74ec487de854fb288437f1a7d99917932b001ef800b0164736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"element\",\"type\":\"string\"}],\"name\":\"addElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"arr\",\"type\":\"string[]\"}],\"name\":\"clearArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"keyOrder\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"createTable\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desc\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dynamicStringArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeById\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"selectById\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"name\":\"updateById\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDELEMENT = "addElement";

    public static final String FUNC_CLEARARRAY = "clearArray";

    public static final String FUNC_CREATETABLE = "createTable";

    public static final String FUNC_DESC = "desc";

    public static final String FUNC_DYNAMICSTRINGARRAY = "dynamicStringArray";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVEBYID = "removeById";

    public static final String FUNC_SELECTBYID = "selectById";

    public static final String FUNC_UPDATEBYID = "updateById";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected MyContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addElement(String element) {
        final Function function = new Function(
                FUNC_ADDELEMENT, 
                Arrays.<Type>asList(new Utf8String(element)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddElement(String element) {
        final Function function = new Function(
                FUNC_ADDELEMENT, 
                Arrays.<Type>asList(new Utf8String(element)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String addElement(String element, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDELEMENT, 
                Arrays.<Type>asList(new Utf8String(element)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getAddElementInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDELEMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt clearArray(List<String> arr) {
        final Function function = new Function(
                FUNC_CLEARARRAY, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(arr, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForClearArray(List<String> arr) {
        final Function function = new Function(
                FUNC_CLEARARRAY, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(arr, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String clearArray(List<String> arr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLEARARRAY, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(arr, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getClearArrayInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLEARARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public TransactionReceipt createTable(String tableName, BigInteger keyOrder, String key,
            List<String> fields) {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(new Utf8String(tableName),
                new Uint8(keyOrder),
                new Utf8String(key),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(fields, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForCreateTable(String tableName, BigInteger keyOrder,
            String key, List<String> fields) {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(new Utf8String(tableName),
                new Uint8(keyOrder),
                new Utf8String(key),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(fields, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String createTable(String tableName, BigInteger keyOrder, String key,
            List<String> fields, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(new Utf8String(tableName),
                new Uint8(keyOrder),
                new Utf8String(key),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(fields, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple4<String, BigInteger, String, List<String>> getCreateTableInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, List<String>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                convertToNative((List<Utf8String>) results.get(3).getValue())
                );
    }

    public Tuple1<BigInteger> getCreateTableOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<String, List<String>> desc() throws ContractException {
        final Function function = new Function(FUNC_DESC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public void desc(CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC_DESC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        asyncExecuteCall(function, callback);
    }

    public String dynamicStringArray(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_DYNAMICSTRINGARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public void dynamicStringArray(BigInteger param0, CallCallback callback) throws
            ContractException {
        final Function function = new Function(FUNC_DYNAMICSTRINGARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt insert(List<String> value) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForInsert(List<String> value) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String insert(List<String> value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeById(String id) {
        final Function function = new Function(
                FUNC_REMOVEBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRemoveById(String id) {
        final Function function = new Function(
                FUNC_REMOVEBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String removeById(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRemoveByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectById(String id) {
        final Function function = new Function(
                FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSelectById(String id) {
        final Function function = new Function(
                FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String selectById(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTBYID, 
                Arrays.<Type>asList(new Utf8String(id)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSelectByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<List<String>> getSelectByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public TransactionReceipt updateById(List<String> value) {
        final Function function = new Function(
                FUNC_UPDATEBYID, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateById(List<String> value) {
        final Function function = new Function(
                FUNC_UPDATEBYID, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateById(List<String> value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBYID, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(value, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getUpdateByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static MyContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MyContract(contractAddress, client, credential);
    }

    public static MyContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MyContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
